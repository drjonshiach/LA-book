Traceback (most recent call last):
  File "/usr/local/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/local/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/local/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/local/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/usr/local/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/local/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/local/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from sympy import *
 
def print_matrix(A):
    m, n = A.shape
    cols = "c" * m
    print(rf"    \left( \begin{{array}}{{{cols}}}")
    for i in range(m):
        print("        ", end="")
        for j in range(n - 1):
            print(rf" {latex(A[i,j])} &", end="")
        print(rf" {latex(A[i,-1])} \\")
    print(r"    \end{array} \right)")
    
    
def print_system(A, b):
    m, n = A.shape
    print(r"\begin{align*}")
    for i in range(m):
        string = "    "
        j = 0
        if A[i,j] == 1:
            string += rf" x_{{{j + 1}}}"
        elif A[i,j] == -1:
            string += rf" - x_{{{j + 1}}}"
        elif A[i,j] > 0:
            string += rf" {latex(A[i,j])} x_{{{j + 1}}}"
        elif A[i,j] < 0:
            string += rf" - {latex(-A[i,j])} x_{{{j + 1}}}"
            
        for j in range(1, n):
            if A[i,j] == 0:
                continue
            elif A[i,j] == 1:
                string += rf" +  x_{{{j + 1}}}"
            elif A[i,j] == -1:
                string += rf" -  x_{{{j + 1}}}"
            elif A[i,j] > 0:
                string += rf" + {latex(A[i,j])} x_{{{j + 1}}}"
            elif A[i,j] < 0:
                string += rf" - {latex(-A[i,j])} x_{{{j + 1}}}"
                
        string += rf" &= {latex(b[i])}"
        if i < m - 1:
            string += r", \\"
        else:
            string += "."
        print(string)
    print(r"\end{align*}")
    print()
    

def matrix_inverse_solve(A, b):
    print("````{dropdown} Solution")
    print(r"\begin{align*}")
    print(r"    \det")
    print_matrix(A)
    print(rf"    &= {latex(A.det())}, \\")
    print(r"    \operatorname{adj}")
    print_matrix(A)
    print(rf"    &= ")
    print_matrix(A.adjugate())
    print(r", \\")
    print(rf"    \therefore A^{{-1}} &= \frac{{1}}{{{latex(A.det())}}}")
    print_matrix(A.adjugate())
    print("\\ = ")
    print_matrix(A.inv())
    print(r",\end{align*}")
    print("\ntherefore")
    print(r"\begin{align*}")
    print(r"    \mathbf{{x}} = ")
    print_matrix(A.inv())
    print_matrix(b)
    print("    =")
    print_matrix(A.inv() * b)
    print(r"\end{align*}")
    print("````")
 

print("`````{admonition} Exercise 2.1")
print(":class: note")
print(":name: ex2.1")
print()
print("Solve the following linear system of equations using the inverse of the coefficient matrix.")     

print("\n(a)")
A = Matrix([[-4, 2], [3, 4]])
b = Matrix([[-22], [11]])
print_system(A, b)
matrix_inverse_solve(A, b)

print("\n(b)")
A = Matrix([[-4, 2], [-1, -3]])
b = Matrix([[6], [-2]])
print_system(A, b)
matrix_inverse_solve(A, b)

print("\n(c)")
A = Matrix([[-4, -4, -2], [3, 0, 4], [1, 0, 0]])
b = Matrix([[16], [-8], [0]])
print_system(A, b)
matrix_inverse_solve(A, b)

print("\n(d)")
A = Matrix([[4, 0, -4], [4, -1, 1], [3, 1, 2]])
b = Matrix([[8], [-4], [-12]])
print_system(A, b)
matrix_inverse_solve(A, b)

print("`````")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [0;32mIn [1], line 1[0m
[0;32m----> 1[0m [38;5;28;01mfrom[39;00m [38;5;21;01msympy[39;00m [38;5;28;01mimport[39;00m [38;5;241m*[39m
[1;32m      3[0m [38;5;28;01mdef[39;00m [38;5;21mprint_matrix[39m(A):
[1;32m      4[0m     m, n [38;5;241m=[39m A[38;5;241m.[39mshape

[0;31mModuleNotFoundError[0m: No module named 'sympy'
ModuleNotFoundError: No module named 'sympy'

