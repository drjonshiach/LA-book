Traceback (most recent call last):
  File "/Users/55093290/anaconda3/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/55093290/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/55093290/anaconda3/lib/python3.11/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/55093290/anaconda3/lib/python3.11/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/55093290/anaconda3/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/55093290/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/55093290/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/55093290/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def print_augmented_matrix(A):
    m, n = A.shape
    cols = "c" * m + "|" + "c" * m
    print(rf"    \left( \begin{{array}}{{{cols}}}")
    for i in range(m):
        print("        ", end="")
        for j in range(n - 1):
            print(rf" {sp.latex(A[i,j])} &", end="")
        print(rf" {sp.latex(A[i,-1])} \\")
    print(r"    \end{array} \right)")
 
  
def print_standalone_matrix(A):
    m, n = A.shape
    cols = "c" * m
    print(r"$$ \begin{align*}")
    print(rf"    \left( \begin{{array}}{{{cols}}}")
    for i in range(m):
        print("        ", end="")
        for j in range(n - 1):
            print(rf" {sp.latex(A[i,j])} &", end="")
        print(rf" {sp.latex(A[i,-1])} \\")
    print(r"    \end{array} \right)")
    print(r"\end{align*} $$")
          
def gjelim_inverse(A):
    m, n = A.shape
    
    A = A.row_join(eye(A.shape[0]))

    print(r"::::{dropdown} Solution (click to show)")
    print(r"$$ \begin{align*}")
    print(r"&", end="")
    print_augmented_matrix(A)
    
    for i in range(m):
        for j in range(i, n):
            if A[i,j] != 0:
                pivot = j
                break
    
        if A[i,pivot] != 1:
            print(r"    \begin{matrix}", end="")
            for j in range(m):
                if j == i:
                    if A[i,pivot] == -1:
                        print(rf" - R_{{{j+1}}}", end="")
                    elif A[i,pivot] != 1:
                        print(rf" {sp.latex(1 / A[i,pivot])} R_{{{j+1}}}", end="")
                else:
                    print(r" \phantom{x}", end="")
                if j < m - 1:
                    print(r" \\", end="")
            print(r" \end{matrix} \\ \\")
            print(r"    \longrightarrow &")
            
            A[i,:] /= A[i,pivot]
            print_augmented_matrix(A)
         
        print(r"    \begin{matrix}", end="")
        for j in range(m):
            if i != j:
                if A[j,pivot] > 0:
                    if A[j,pivot] == 1:
                        print(rf" R_{{{j+1}}} - R_{{{i + 1}}}", end="")
                    else:
                        print(rf" R_{{{j+1}}} - {sp.latex(A[j,pivot])} R_{{{i + 1}}}", end="")    
                elif A[j,pivot] < 0:
                    if A[j,pivot] == -1:
                        print(rf" R_{{{j+1}}} + R_{{{i + 1}}}", end="")
                    else:
                        print(rf" R_{{{j+1}}} + {sp.latex(-A[j,pivot])} R_{{{i + 1}}}", end="")
                elif A[j,pivot] == 0:
                    print(r" \phantom{x}", end="")
                A[j,:] -= A[j, pivot] * A[i,:]
            if i == j:
                print(r" \phantom{x}", end="")
            if j < m - 1:
                print(r" \\", end="")
        print(r" \end{matrix} \\ \\")
        print(r"    \longrightarrow &")
        print_augmented_matrix(A)
    print(r"\end{align*} $$")
    print()
    print(rf"therefore ")
    print(r"$$ \begin{align*}")
    print(r"A^{{-1}} = ")
    print_matrix(A[:,n:])
    print(r". \end{align*} $$")
    print("::::")

    return A


print(":::::{admonition} Exercise 2.6")
print(":class: note")
print(":name: ex2.6")
print()
print("Use Gauss-Jordan elimination to calculate the inverse of the coefficient matrices from [exercise 2.1](ex2.1).")
print()    
print("\n(a)")
A = sp.Matrix([[-4, 2], [3, 4]])
print_standalone_matrix(A)
AI = gjelim_inverse(A)

print("\n(b)")
A = sp.Matrix([[-4, 2], [-1, -3]])
print_standalone_matrix(A)
AI = gjelim_inverse(A)

print("\n(c)")
A = sp.Matrix([[-4, -4, -2], [3, 0, 4], [1, 0, 0]])
print_standalone_matrix(A)
AI = gjelim_inverse(A)

print("\n(d)")
A = sp.Matrix([[4, 0, -4], [4, -1, 1], [3, 1, 2]])
print_standalone_matrix(A)
AI = gjelim_inverse(A)

print(":::::")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[7], line 104[0m
[1;32m    102[0m A [38;5;241m=[39m sp[38;5;241m.[39mMatrix([[[38;5;241m-[39m[38;5;241m4[39m, [38;5;241m2[39m], [[38;5;241m3[39m, [38;5;241m4[39m]])
[1;32m    103[0m print_standalone_matrix(A)
[0;32m--> 104[0m AI [38;5;241m=[39m gjelim_inverse(A)
[1;32m    106[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;130;01m\n[39;00m[38;5;124m(b)[39m[38;5;124m"[39m)
[1;32m    107[0m A [38;5;241m=[39m sp[38;5;241m.[39mMatrix([[[38;5;241m-[39m[38;5;241m4[39m, [38;5;241m2[39m], [[38;5;241m-[39m[38;5;241m1[39m, [38;5;241m-[39m[38;5;241m3[39m]])

Cell [0;32mIn[7], line 29[0m, in [0;36mgjelim_inverse[0;34m(A)[0m
[1;32m     26[0m [38;5;28;01mdef[39;00m [38;5;21mgjelim_inverse[39m(A):
[1;32m     27[0m     m, n [38;5;241m=[39m A[38;5;241m.[39mshape
[0;32m---> 29[0m     A [38;5;241m=[39m A[38;5;241m.[39mrow_join(eye(A[38;5;241m.[39mshape[[38;5;241m0[39m]))
[1;32m     31[0m     [38;5;28mprint[39m([38;5;124mr[39m[38;5;124m"[39m[38;5;124m::::[39m[38;5;132;01m{dropdown}[39;00m[38;5;124m Solution (click to show)[39m[38;5;124m"[39m)
[1;32m     32[0m     [38;5;28mprint[39m([38;5;124mr[39m[38;5;124m"[39m[38;5;124m$$ [39m[38;5;124m\[39m[38;5;124mbegin[39m[38;5;124m{[39m[38;5;124malign*}[39m[38;5;124m"[39m)

[0;31mNameError[0m: name 'eye' is not defined
NameError: name 'eye' is not defined

